#include <iostream>
#include <sstream>
#include <string>

// Функция для получения чисел от 0 до x
std::string listNums(int x) {
    std::ostringstream oss; // Используем ostringstream для удобной конкатенации строк
    for (int i = 0; i <= x; ++i) {
        oss << i << " "; // Добавляем каждое число к строке
    }
    return oss.str(); 
}

// Функция для получения чисел от x до 0
std::string reverseListNums(int x) {
    std::ostringstream oss;
    for (int i = x; i >= 0; --i) {
        oss << i << " "; // Добавляем каждое число к строке
    }
    return oss.str();
}

// Функция для получения четных чисел от 0 до x
std::string chet(int x) {
    std::ostringstream oss;
    for (int i = 0; i <= x; i += 2) {
        oss << i << " "; // Добавляем каждое четное число к строке
    }
    return oss.str();
}

// Функция для возведения x в степень y
int pow(int x, int y) {
    int result = 1; // Начальноe значение = 1
    for (int i = 0; i < y; ++i) {
        result *= x; // Умножаем результат на x y раз
    }
    return result; 
}

// Функция для вывода левостороннего треугольника из символов '*'
void leftTriangle(int x) {
    for (int i = 1; i <= x; ++i) {
        for (int j = 0; j < i; ++j) {
            std::cout << '*'; // Выводим '*' в каждой строке по количеству текущего номера строки
        }
        std::cout << std::endl; // Переход к следующей строке
    }
}

// Функция для проверки, является ли введенное число целым положительным
bool isPositiveInteger(const std::string& str) {
    for (char const &c : str) {
        if (std::isdigit(c) == 0) return false; // Если символ не цифра, возвращаем false
    }
    return !str.empty(); // Вернуть true, если строка не пустая
}

// Главная функция
int main() {
    int choice, x, y;
    std::string input;

    while (true) {
        std::cout << "Выберите задачу:\n"
                  << "1. Числа подряд(от 0 до x)\n"
                  << "2. Числа наоборот(от x до 0)\n"
                  << "3. Четные числа\n"
                  << "4. Степень числа(умножение числа x на степень y\n"
                  << "5. Левый треугольник\n"
                  << "0. Выход\n";
        std::cin >> choice; // Ввод выбора задачи

        if (choice == 0) break; // Выйти из цикла, если выбран 0

        std::cout << "Введите целое положительное число: ";
        std::cin >> input; // Ввод числа как строки

        if (!isPositiveInteger(input)) { // Проверка корректности введенных данных
            std::cout << "Ошибка: Ввод должен быть целым положительным числом.\n";
            continue;
        }
        
        // Преобразуем введенные данные в целое число
        x = std::stoi(input);

        switch (choice) {
            case 1:
                std::cout << listNums(x) << std::endl; // Выводим числа от 0 до x
                break;
            case 2:
                std::cout << reverseListNums(x) << std::endl; // Выводим числа от x до 0
                break;
            case 3:
                std::cout << chet(x) << std::endl; // Выводим четные числа от 0 до x
                break;
            case 4:
                std::cout << pow(x, 2) << std::endl; // Возводим x в квадрат (пример)
                break;
            case 5:
                leftTriangle(x); // Выводим левый треугольник
                break;
            default:
                std::cout << "Ошибка: Неправильный выбор.\n"; // Обработка неправильного выбора
                break;
        }
    }
    return 0; 
}
